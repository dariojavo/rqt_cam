#! /usr/bin/env python

# Code for requesting and publishing data for available cameras generated by cam_v4l2_node
import rospy
from ecam_v4l2.srv import *
from sensor_msgs.msg import Image
from ecam_v4l2.msg import image
import numpy as np
import cv2
from cv_bridge import CvBridge
from collections import defaultdict
import json
import os

#import v4l2

def load_default_parameters(out):
    
    for cam in cameras:
        cam_name = cam.replace('/','')
        print('CAMERA: ' + cam_name)
        for key,_ in out.items():
            #print(key,value)
            if key in ['Brightness', 'Contrast', 'Saturation', 'White Balance, Automatic', 'Gamma', 'Gain', 'Power Line Frequency', 'Sharpness', 'Auto Exposure']:
                print('Currently modifying: ' + key)
                print('Default value: ', out[key]['default_value'])

                # Wait for service to be available
                rospy.wait_for_service('SetControl')

                # Create the connection to the service. Remember it's a Trigger service
                set_camera_parameters = rospy.ServiceProxy('SetControl', set_control)

                A = set_controlRequest()

                A.cam_name = cam_name
                A.id = out[key]['id']
                A.value = out[key]['default_value']

                set_camera_parameters(A)



if __name__ == '__main__':

    # In ROS, nodes are uniquely named. If two nodes with the same
    # name are launched, the previous one is kicked off. The
    # anonymous=True flag means that rospy will choose a unique
    # name for our 'listener' node so that multiple listeners can
    # run simultaneously.
    rospy.init_node('cameras_parameters', anonymous=True)

    ### Read all camera controls menu from each camera ###

    # wait for this sevice to be running
    rospy.wait_for_service('QueryControl')
    
    # Create an object of the type TriggerRequest. We nned a TriggerRequest for a Trigger service
    req = query_controlRequest()

    # Get current available topics
    topics = rospy.get_published_topics()

    # Get all See3CAM availables
    cameras = []
    for topic in topics:
        for words in topic:
            if  'See3CAM' in words:
                if 'view' not in words:
                    cameras.append(words)

    print('Detected cameras: ')
    print(cameras)

    # Create the connection to the service. Remember it's a Trigger service
    camera_parameters = rospy.ServiceProxy('QueryControl', query_control, persistent= True)
    
    out = {} # Create dictionary for saving default data of cameras

    dir_path = os.path.dirname(os.path.dirname(os.path.realpath(__file__)))
    print(dir_path)
    path = dir_path + "/config/"
    print(path)
    # Check whether the specified path exists or not
    isExist = os.path.exists(path)
    if not isExist:
    # Create a new directory because it does not exist
        os.makedirs(path)
        print("Configuration folder created")

    if os.path.isfile(dir_path + '/config/result.json') is False:
        # Get current values of all cameras -- Consider same model of cameras
        i = 0
        while i < 13:
            for cam in cameras: #Only for one camera
                req.cam_name = cam.replace('/','') # #Camera name, For example: 'See3CAM_24CUG_062B930B' 
                print("Camera #: " + cam.replace('/',''))
                req.id = 2147483648 #V4L2_CTRL_FLAG_NEXT_CTRL
                req.reqtype = 7 # CTRL_TYPE --defined in rqt_cam/source/rqt_cam/include/rqt_cam/srv_clients.h 
                #req.index = 5
                query_menu = camera_parameters.call(req)    
                #out[req.cam_name][i] = query_menu
                out[query_menu.name] = {'id': query_menu.id, 
                                        'type': query_menu.type, 
                                        'name': query_menu.name,
                                        'minimum': query_menu.minimum,
                                        'maximum': query_menu.maximum,
                                        'step': query_menu.step,
                                        'default_value': query_menu.default_value, 
                                        'cur_value': query_menu.cur_value}
                break
            i +=1   
        
        #print(out[1].name)
        
        #print(json.dumps(out, default=dumper, indent=2))
        with open(dir_path + '/config/result.json', 'w') as fp:
            json.dump(out, fp)

    else:
        f = open(dir_path + '/config/result.json')
        out = json.load(f)
        f.close

    load_default_parameters(out)

    Dictionary_example = {'Brightness': 10, 'Contrast': 15}

    for cam in cameras:
        cam_name = cam.replace('/','')
        print('CAMERA: ' + cam_name)
        for key,value in Dictionary_example.items():
            if key in out.keys():
                print('Currently modifying: ' + key)
                print('Default value: ', out[key]['default_value'])
                print('Current value: ', out[key]['cur_value'])
                print('New value: ', value)
            
                # wait for this sevice to be running
                rospy.wait_for_service('SetControl')

                # Create the connection to the service. Remember it's a Trigger service
                set_camera_parameters = rospy.ServiceProxy('SetControl', set_control)

                A = set_controlRequest()

                A.cam_name = cam_name
                A.id = out[key]['id']
                A.value = value

                set_camera_parameters(A)